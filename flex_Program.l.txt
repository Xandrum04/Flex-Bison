%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"

int error_type;

void yyerror(char *s);

int line_number=1;

char str_buffer[];

%}
DIGIT [0-9]
LETTER [a-zA-Z]

NUMBER [1-9]{DIGIT}*|"0"

IDENTIFIER [a-zA-Z_][a-zA-Z0-9_]*



%%
{NUMBER}                    {yylval.intvalue = atoi(yytext); return NUMBER; }
{IDENTIFIER}                {yylval.strvalue = strdup(yytext); return IDENTIFIER; }

"IF"                        { yylval.strvalue = strdup(yytext); return IF; }
"ELSE"                      { yylval.strvalue = strdup(yytext); return ELSE; }
"ELSE IF"                   { yylval.strvalue = strdup(yytext); return ELSE_IF; }
"WHILE"                     { yylval.strvalue = strdup(yytext); return WHILE; }
"DO"                        { yylval.strvalue = strdup(yytext); return DO; }
"FOR"                       { yylval.strvalue = strdup(yytext); return FOR; }
"SWITCH"                    { yylval.strvalue = strdup(yytext); return SWITCH; }
"CASE"                      { yylval.strvalue = strdup(yytext); return CASE; }
"DEFAULT"                   { yylval.strvalue = strdup(yytext); return DEFAULT; }
"BREAK"                     { yylval.strvalue = strdup(yytext); return BREAK; }
"RETURN"                    { yylval.strvalue = strdup(yytext); return RETURN; }
"CLASS"                     { yylval.strvalue = strdup(yytext); return CLASS; }
"PUBLIC"                    { yylval.strvalue = strdup(yytext); return PUBLIC; }
"PRIVATE"                   { yylval.strvalue = strdup(yytext); return PRIVATE; }
"INT"                       { yylval.strvalue = strdup(yytext); return INT; }
"CHAR"                      { yylval.strvalue = strdup(yytext); return CHAR; }
"DOUBLE"                    { yylval.strvalue = strdup(yytext); return DOUBLE; }
"BOOLEAN"                   { yylval.strvalue = strdup(yytext); return BOOLEAN; }
"STRING"                    { yylval.strvalue = strdup(yytext); return STRING; }
"TRUE"                      { yylval.strvalue = strdup(yytext); return TRUE; }
"FALSE"                     { yylval.strvalue = strdup(yytext); return FALSE; }
"NEW"                       { yylval.strvalue = strdup(yytext); return NEW; }
"OUT.PRINT"                 { yylval.strvalue = strdup(yytext); return OUT_PRINT; }

";"                         { return SEMICOLON; }
"{"                         { return LBRACE; }
"}"                         { return RBRACE; }
"("                         { return LPAREN; }
")"                         { return RPAREN; }
"["                         { return LBRACKET; }
"]"                         { return RBRACKET; }
"="                         { return ASSIGN; }
","                         { return COMMA; }
"+"                         { return PLUS; }
"-"                         { return MINUS; }
"*"                         { return MULT; }
"/"                         { return DIV; }
"<"                         { return LESS_THAN; }
">"                         { return GREATER_THAN; }
"=="                        { return EQUAL; }
"!="                        { return NOT_EQUAL; }
"<="                        { return LESS_THAN_EQUAL; }
">="                        { return GREATER_THAN_EQUAL; }
"&&"                        { return AND; }
"||"                        { return OR; }
"%"                         { return MODULO; }
"#"                         { return HASH; }
"@"                         { return AT; }
"^"                         { return CARET; }
"?"                         { return QUESTION_MARK; }
"'"                         { return SINGLE_QUOTE; }
"\""                        { return DOUBLE_QUOTE; }
"_"                         { return UNDERSCORE; }
"."                         { return DOT; }
"!"                         { return EXCLAMATION_POINT; }
"|"                         { return PIPE; }
"""                         { return QUOTED_STRING; }
"?"                         { return QUESTION_MARK; }



\".*\"                      { return STRING_LITERAL; }
"//".*                      { return ONE_LINE_COMMENT; }
"/*".*"*/"                  { return MULTIPLE_LINE_COMMENTS; }


[ \t\n]                   { return IGNORE_WHITESPACE_NEWLINE; }
.+{printf("Invalid Character:%s\n",yytext);}


%%


int yywrap(){
return 1;
}


