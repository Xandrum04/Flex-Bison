%{ 
/* DEFINITIONS*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
%}

/*DECLARATIONS*/
%token IF ELSE ELSE_IF WHILE DO FOR SWITCH CASE DEFAULT BREAK RETURN CLASS PUBLIC PRIVATE INT CHAR DOUBLE BOOLEAN STRING TRUE FALSE NEW OUT_PRINT SEMICOLON LBRACE RBRACE LPAREN RPAREN LBRACKET RBRACKET ASSIGN COMMA PLUS MINUS MULT DIV LESS_THAN GREATER_THAN EQUAL NOT_EQUAL LESS_THAN_EQUAL GREATER_THAN_EQUAL AND OR MODULO HASH AT CARET QUESTION_MARK SINGLE_QUOTE DOUBLE_QUOTE UNDERSCORE DOT EXCLAMATION_POINT PIPE STRING_LITERAL ONE_LINE_COMMENT MULTIPLE_LINE_COMMENTS IDENTIFIER NUMBER

%union {
    int num;
    char sym;
}

%%
  /* RULES / BNF */


PROGRAM: STATEMENTS;

STATEMENTS : STATEMENTS                { printf("Statement\n"); }
           | STATEMENTS  STATEMENTS    { printf("Statements\n"); }
           ;
STATEMENT : STATEMENT_IF               { printf("Statement IF\n"); }
          | STATEMENT_WHILE            { printf("Statement WHILE\n"); }
          | STATEMENT_ASSIGN           { printf("Statement ASSIGN\n"); }
          | STATEMENT_SWITCH           { printf("Statement SWITCH\n"); }
          | STATEMENT_RETURN           { printf("Statement RETURN\n"); }
          | STATEMENT_CLASS            { printf("Statement CLASS\n"); }
          | VARIABLE_DECLARATION       { printf("Statement VARIABLE DECLARATION\n"); }
          | METHOD_DECLARATION         { printf("Statement METHOD DECLARATION\n"); }
          | STATEMENT_DO_WHILE         { printf("Statement DO WHILE \n"); }
          | STATEMENT_FOR              { printf("Statement FOR\n"); }
          | STATEMENT_PRINT            { printf("Statement PRINT\n"); }
          | CREATE_CLASS_OBJECT        { printf("Statement OBJECT\n"); }
          | STATEMENT_BREAK            { printf("Statement BREAK\n"); }
          | COMMENTS                   { printf("Comment COMMENTS \n"); } 
          ;

STATEMENT_IF: IF LPAREN CONDITION RPAREN LBRACE STATEMENTS RBRACE
            | IF LPAREN CONDITION RPAREN STATEMENTS STATEMENT_ELSE_IF ELSE LBRACE
              STATEMENTS RBRACE;

STATEMENT_ELSE_IF: ELSE_IF LPAREN CONDITION RPAREN LBRACE STATEMENTS RBRACE
                 | LPAREN CONDITION RPAREN LBRACE STATEMENTS RBRACE STATEMENT_ELSE_IF;

STATEMENT_WHILE: WHILE LPAREN CONDITION RPAREN LBRACE STATEMENTS RBRACE;

STATEMENT_BREAK: BREAK SEMICOLON;

STATEMENT_ASSIGN: VARIABLE EQUALS EXPRESSION SEMICOLON;

STATEMENT_SWITCH: SWITCH LPAREN EXPRESSION RPAREN SWITCH_BODY;

SWITCH_BODY: CASE EXPRESSION COLON STATEMENT
           | CASE EXPRESSION COLON STATEMENT DEFAULT COLON STATEMENT
           | CASE EXPRESSION COLON STATEMENT SWITCH_BODY
           ;

STATEMENT_RETURN: RETURN EXPRESSION SEMICOLON;

STATEMENT_CLASS: ACCESS_MODIFIER CLASS CLASS_IDENTIFIER LBRACE VARIABLE_DECLARATION   
               METHOD_DECLARATION RBRACE;

CLASS_IDENTIFIER: UPPERCASE
                | UPPERCASE IDENTIFIER
                ;

CREATE_CLASS_OBJECT: CLASS_IDENTIFIER IDENTIFIER EQUALS STATEMENT_NEW LBRACE RBRACE   
                   SEMICOLON;

STATEMENT_DO_WHILE: DO LBRACE STATEMENTS RBRACE WHILE LPAREN CONDITION RPAREN;

ACCESS_TO_CLASS_MEMBERS: IDENTIFIER DOT IDENTIFIER SEMICOLON;

STATEMENT_FOR: FOR LPAREN STATEMENT_ASSIGN SEMICOLON CONDITION SEMICOLON STATEMENT_ASSIGN         
             RPAREN LBRACE RBRACE;


COMMENTS: // CHARACTERS
        | /* CHARACTERS */
        ;

STATEMENT_PRINT: OUT.PRINT LPAREN STRING_LITERAL RPAREN SEMICOLON
               | OUT.PRINT LPAREN STRING_LITERAL COMMA EXPRESSION RPAREN SEMICOLON
               ;

VARIABLE_DECLARATION: ACCESS_MODIFIER VARIABLE_TYPE IDENTIFIER SEMICOLON
                    | VARIABLE_TYPE IDENTIFIER SEMICOLON
                    ;

METHOD_DECLARATION: ACCESS_MODIFIER RETURN_TYPE IDENTIFIER LPAREN RPAREN LBRACE STATEMENTS     
                   RBRACE
                  | ACCESS_MODIFIER RETURN_TYPE IDENTIFIER LPAREN PARAMETER_LIST RPAREN
                   LBRACE STATEMENTS RBRACE
                  | ACCESS_MODIFIER RETURN_TYPE IDENTIFIER LPAREN RPAREN LBRACE 
                   VARIABLE_DECLARATION STATEMENTS RBRACE
                  | ACCESS_MODIFIER RETURN_TYPE IDENTIFIER LPAREN PARAMETER_LIST RPAREN  
                   LBRACE VARIABLE_DECLARATION STATEMENTS RBRACE
                  ;

RETURN_TYPE: VARIABLE_TYPE
           | VOID
           ;

ACCESS_MODIFIER: PUBLIC
               | PRIVATE
               ;

VARIABLE_TYPE: INT
             | CHAR
             | DOUBLE
             | BOOLEAN
             | STRING
             ;

PARAMETER_LIST: VARIABLE_TYPE IDENTIFIER
              | VARIABLE_TYPE IDENTIFIER COMMA PARAMETER_LIST
              ;

CONDITION: EXPRESSION COMPARISON EXPRESSION
         | EXPRESSION COMPARISON EXPRESSION AND CONDITION
         | EXPRESSION COMPARISON EXPRESSION OR CONDITION
         ;

COMPARISON: GREATER_THAN
          | LESS_THAN
          | LESS_THAN_EQUALS
          | GREATER_THAN_EQUALS
          | IS_EQUALS
          | NOT_EQUALS
          ;

EXPRESSION: VALUE
          | OPERATION
          | STATEMENT_NEW
          | BOOLEAN
          ;

BOOLEAN: TRUE_VALUE
       | FALSE_VALUE
       ;

STATEMENT_NEW: NEW VARIABLE_TYPE
             | NEW CLASS_IDENTIFIER
             ;

VALUE: NUMBER
     | IDENTIFIER
     ;
 
OPERATION: ADDITION
         | MULTIPLICATION
         | SUBTRACTION
         | DIVISION
         ;

OPERATION_CONTINUE: PLUS LPAREN OPERATION RPAREN 
                  | MINUS LPAREN OPERATION RPAREN 
                  | MUL LPAREN OPERATION RPAREN 
                  | DIV LPAREN OPERATION RPAREN 
                  ;

ADDITION: VALUE PLUS VALUE
        | VALUE PLUS VALUE OPERATION_CONTINUE
        ;
       
MULTIPLICATION: VALUE MUL VALUE
              | VALUE MUL VALUE OPERATION_CONTINUE
              ;

SUBTRACTION: VALUE MINUS VALUE
           | VALUE MINUS VALUE OPERATION_CONTINUE
           ;

DIVISION: VALUE DIV VALUE
        | VALUE DIV VALUE OPERATION_CONTINUE
        ;

IDENTIFIER: LETTER
          | IDENTIFIER LETTER
          | IDENTIFIER NUMBER
          | IDENTIFIER UNDERSCORE
          ; 

NUMBER: DIGIT
      | DIGIT NUMBER
      ;

LETTER: UPPERCASE
      | LOWERCASE
      ;

STRING_LITERAL: QUOTATION_MARKS CHARACTERS QUOTATION_MARKS;

CHARACTERS: CHARACTER
          | CHARACTER CHARACTERS
          ;

CHARACTER: DIGIT
         | LETTER
         | SPECIAL_CHARACTERS
         ;

%%
 /* CODE */

void yyerror(char *s)
{
  printf("Syntax Error in line %s\n",s);
  return 0;
}

int main(int argc, char* argv[]){

if (argc < 2) {
        fprintf(stderr, "Usage: %s <input_file>\n", argv[0]);
        return 1;
    }

    yyin = fopen(argv[1], "r");
    if (!yyin) {
        fprintf(stderr, "Error opening file %s\n", argv[1]);
        return 1;
    }

    yyparse();

    fclose(yyin);
    return 0;

}
 



